!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	0.0.0	//
IpfsURL	config.go	/^	IpfsURL       string `json:"ipfsURL"`$/;"	m	struct:ticketmasterConfig
ListenAddress	config.go	/^	ListenAddress string `json:"ticketmasterURL"`$/;"	m	struct:ticketmasterConfig
Version	config.go	/^	Version       string `json:"version"`$/;"	m	struct:ticketmasterConfig
configuration	config.go	/^type configuration struct {$/;"	s
getIPFSShell	ticketmaster.go	/^func (n *ticketmaster) getIPFSShell() *ipfs.Shell {$/;"	f
getMasterRSAPub	ticketmaster.go	/^func (n *ticketmaster) getMasterRSAPub() ssh.PublicKey {$/;"	f
ipfsAddress	config.json	/^        "ipfsAddress" : "127.0.0.1:5001"$/;"	s	object:ticketmaster
ipfsURL	ticketmaster.go	/^	ipfsURL      url.URL \/\/URL to the IPFS installation.$/;"	m	struct:ticketmaster
listenAddress	config.json	/^        "listenAddress" : "127.0.0.1:25566",$/;"	s	object:ticketmaster
loadFile	config.go	/^func (config *configuration) loadFile(filename string) error {$/;"	f
main	config.go	/^package main$/;"	p
main	constants.go	/^package main$/;"	p
main	main.go	/^func main() {$/;"	f
main	main.go	/^package main$/;"	p
main	ticketmaster.go	/^package main$/;"	p
masterRSAPub	ticketmaster.go	/^	masterRSAPub ssh.PublicKey$/;"	m	struct:ticketmaster
newConfiguration	config.go	/^func newConfiguration() *configuration {$/;"	f
nodeVersion	ticketmaster.go	/^	nodeVersion  semver.Version$/;"	m	struct:ticketmaster
objectHash	ticketmaster.go	/^	objectHash    string         `json:"objectHash"` \/\/IPFS Object to be pinned.$/;"	m	struct:pinTicket
pinTicket	ticketmaster.go	/^type pinTicket struct {$/;"	s
requestPin	ticketmaster.go	/^func (n *ticketmaster) requestPin(ticket pinTicket) error {$/;"	f
servURL	ticketmaster.go	/^	servURL       url.URL        `json:"servURL"`    \/\/THe URL of the node that pins$/;"	m	struct:pinTicket
servURL	ticketmaster.go	/^	servURL      url.URL$/;"	m	struct:ticketmaster
shell	ticketmaster.go	/^	shell        *ipfs.Shell$/;"	m	struct:ticketmaster
signature	ticketmaster.go	/^	signature     ssh.Signature  `json:"signature"`$/;"	m	struct:pinTicket
ticketVersion	ticketmaster.go	/^	ticketVersion semver.Version `json:"ticketVersion`$/;"	m	struct:pinTicket
ticketmaster	config.go	/^	ticketmaster ticketmasterConfig `json:"primaryTicketmaster"`$/;"	m	struct:configuration
ticketmaster	config.json	/^    "ticketmaster" : {$/;"	o
ticketmaster	ticketmaster.go	/^type ticketmaster struct {$/;"	s
ticketmasterConfig	config.go	/^type ticketmasterConfig struct {$/;"	s
timeEnd	ticketmaster.go	/^	timeEnd       time.Time      `json:"timeEnd"`$/;"	m	struct:pinTicket
timeStart	ticketmaster.go	/^	timeStart     time.Time      `json:"timeStart"`$/;"	m	struct:pinTicket
toTicketmaster	config.go	/^func (cn ticketmasterConfig) toTicketmaster() ticketmaster {$/;"	f
validPinTicket	ticketmaster.go	/^func (n *ticketmaster) validPinTicket(ticket pinTicket) bool {$/;"	f
version	config.json	/^    "version": "0.0.1",$/;"	s
